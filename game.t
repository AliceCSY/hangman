% Alice (Game Logic) and Tariq (Hangman Graphic)
% May 2016
% Guess the Secret Word!
% This program generates a secret word from a given list that the user must guess by entering one
% letter at a time. Each time they guess a letter, they lose 10 of their 100 points. They have the
% option of guessing the entire word at any given time by entering "!" instead of a letter, but if
% they guess incorrectly, they lose all their remaining points. If they guess correctly, they gain
% 10 points! If they're stuck, they can also enter "?" to get a word hint, but this will cost them
% 20 of their points. Once they have no remaining points, they will be forced to guess the entire
% word. In any case, they gain 10 extra points if they guess the secret word correctly. At the end
% of each game, they are given the option to play again with 100 new points and a new secret word.

% Declaration of constants and variables.
const GUESS_WORD_NOW := "!"
const GET_HINT := "?"
const END_GAME_NOW := "end"
var continueToGame, secretWord, wordGuess, endGame : string
var letterGuess : string (1)
var lettersGuessed := ""
var score := 100
var wordIndex : int
var endScreenFont := Font.New ("Courier New:30")

% This function randomly chooses a secret word.
function getSecretWord : string
    % Array of 10 secret words (all in capital letters).
    var words : array 1 .. 24 of string := init (
            "JUMBO", "GOOGLE", "PELICAN", "SHAMPOO", "UMBRELLA",
            "CLARINET", "PYTHON", "RACCOON", "OCEAN", "NOTEBOOK",
            "PYRAMID", "SUNSCREEN", "FLAMINGO", "PARMESAN",
            "BIRTHDAY", "AUTUMN", "STILETTO", "ORIGAMI", "QUIVER",
            "VOLDEMORT", "HEFFERNAN", "EUCALYPTUS", "JAZZ", "OXYGEN",
        )
    randint (wordIndex, 1, 24)
    result words (wordIndex)
end getSecretWord

% This function gets a hint based on which word was generated by the function
% getSecretWord.
function getWordHint : string
    % Array of word hints that correspond with each of the secret words.
    var hints : array 1 .. 24 of string := init (
            "Synonym for \"big\".",
            "Company named after the number with 100 zeros.",
            "An aquatic bird.",
            "Something you'd find in a bathroom.",
            "What goes up when rain comes down?",
            "Squidward's favourite instrument.",
            "A programming language.",
            "A nocturnal mammal.",
            "Something you find on a globe.",
            "Something you'd use in school.",
            "Built as tombs for the rulers of an ancient civilization.",
            "You use this when you go to the beach.",
            "Animal that is known for its vibrant colour.",
            "A type of cheese.",
            "You celebrate this once a year.",
            "A season.",
            "A weapon or a type of high heel shoe.",
            "A Japanese art form.",
            "Hawkeye's best friend.",
            "Tom Riddle.",
            "The best teacher ever!",
            "A koala's favourite food.",
            "A genre of music.",
            "An element."
        )
    result hints (wordIndex)
end getWordHint

% States the objective.
put "Guess the Secret Word!"
put "--------------------------------------------------------------------------------"
put "Object:" : 9 ..
put "Try to guess a secret word without losing all your points."
put ""
% States the rules of the game.
put "Rules:" : 9 ..
put "You start with 100 points. For each individual letter that you guess,"
put "" : 9, "10 points are deducted from your score."
put "" : 9, "You can choose to guess the secret word at any time, but if you"
put "" : 9, "lose all your points before you do so, you will be forced to guess"
put "" : 9, "it. In any case, you will gain 10 points if you guess the secret"
put "" : 9, "word correctly."
put ""
% Informs the user of the two different signals used in the game.
put "Signals:" : 9 ..
put "Instead of guessing a letter, there are two different signals you can"
put "" : 9, "enter:\n"
put "" : 9, "\"?\" Signal: Gives you a hint for the secret word."
put "" : 21, "Be warned - this will cost you 20 of your points!\n"
put "" : 9, "\"!\" Signal: Allows you to guess the secret word immediately."
put "" : 21, "If you guess correctly, you gain 10 points. Otherwise,"
put "" : 21, "you lose all your remaining points.\n"
put "--------------------------------------------------------------------------------"


% Prompts the user to indicate when they've finished reading the rules by entering
% any character.
put "Enter any character to start playing: " ..
get continueToGame

% This loop repeats the game as many times as the user wants.
loop
    cls
    % Gets a secret word.
    secretWord := getSecretWord

    % Creates a variable with the same number of dashes as there are characters
    % in the secret word.
    for i : 1 .. length (secretWord)
        lettersGuessed := lettersGuessed + "-"
    end for

    % Tells the user how many characters are in the word and, if applicable, outputs the
    % letters in the word that have already been guessed (the ones that have not been
    % guessed are represented by dashes).
    put "The secret word has ", length (secretWord), " characters:"
    put lettersGuessed

    % This loop repeatedly prompts the user to either guess a letter or enter one of the
    % signals. It does different things based on what the user inputted.
    loop
        % Tells the user how many points they currently have and asks them to either guess
        % a letter or enter one of the signals.
        put "You currently have ", score, " points.\n"
        put "Enter a letter (or \"!\" or \"?\"): " ..
        get letterGuess
        cls
        
        % Checks to see if the character entered was the "!" signal. If so, the program exits the loop.
        exit when letterGuess = GUESS_WORD_NOW

        if letterGuess = GET_HINT then                              % Checks to see if the character entered was the "?" signal.
            if score >= 20 then                                     % If so, the program checks to see if the player has enough points to
                put "HINT: ", getWordHint                           % get a hint. If so, a hint is displayed and 20 points are deducted
                score := score - 20                                 % from the score. If not, an error message is displayed and no points
                put "Letters guessed so far: ", lettersGuessed      % are deducted.
            else
                put "Not enough points! You need 20 points to get a hint."
                put "Letters guessed so far: ", lettersGuessed
            end if
                
        % Checks to see if the character entered was a letter. If so, 10 points are deducted from the user's
        % total score.
        elsif letterGuess >= "a" and letterGuess <= "z" or letterGuess >= "A" and letterGuess <= "Z" then
            score := score - 10
            
            % Checks to see if the inputted letter is lowercase. If so, the program converts it
            % to its uppercase equivalent.
            if letterGuess >= "a" and letterGuess <= "z" then
                letterGuess := chr (ord (letterGuess) - 32)
            end if
            
            % Checks to see if the secret word contains the letter guessed by the user. If so, the
            % corresponding dashes get replaced with the inputted letter.
            for letter : 1 .. length (secretWord)
                if letterGuess = secretWord (letter) then
                    lettersGuessed := lettersGuessed (1 .. letter - 1) + letterGuess + lettersGuessed (letter + 1 .. *)
                end if
            end for
            put "The secret word has ", length (secretWord), " characters:"
            put lettersGuessed
            
            % Checks to see if the user guessed all the letters of the word correctly. If so, 10
            % points are added to the score and the program exits the loop.
            if lettersGuessed = secretWord then
                put ""
                put "Congratulations! You got all the letters!"
                exit
            end if
        else
            % If the character entered is neither a letter nor one of the signals, the user is told that
            % what they entered was invalid. No points are deducted.
            put "Invalid input! Please enter a letter."
        end if
        exit when score <= 0
        
        % For each 10 point decrease in the score, a new part of the hangman is drawn. When the hangman has
        % been drawn completely, the user has no remaining points and must guess the secret word.
        case score of
            label 100 :
            label 90 :
                Draw.ThickLine (350, 2, 400, 2, 5, black)           % base of pole
            label 80 :
                Draw.ThickLine (350, 2, 400, 2, 5, black)           % base of pole
                Draw.ThickLine (375, 300, 375, 0, 5, black)         % long vertical pole
            label 70 :
                Draw.ThickLine (350, 2, 400, 2, 5, black)           % base of pole
                Draw.ThickLine (375, 300, 375, 0, 5, black)         % long vertical pole
                Draw.ThickLine (250, 300, 375, 300, 5, black)       % horizontal piece
            label 60 :
                Draw.ThickLine (350, 2, 400, 2, 5, black)           % base of pole
                Draw.ThickLine (375, 300, 375, 0, 5, black)         % long vertical pole
                Draw.ThickLine (250, 300, 375, 300, 5, black)       % horizontal piece
                Draw.ThickLine (250, 300, 250, 265, 5, black)       % noose (attached to head)
            label 50 :
                Draw.ThickLine (350, 2, 400, 2, 5, black)           % base of pole
                Draw.ThickLine (375, 300, 375, 0, 5, black)         % long vertical pole
                Draw.ThickLine (250, 300, 375, 300, 5, black)       % horizontal piece
                Draw.ThickLine (250, 300, 250, 265, 5, black)       % noose (attached to head)
                Draw.FillOval (250, 230, 35, 35, black)             % head of stickman
                Draw.FillOval (235, 243, 6, 6, white)               % left eye
                Draw.FillOval (265, 243, 6, 6, white)               % right eye
                Draw.FillOval (250, 215, 20, 15, white)             % mouth
            label 40 :
                Draw.ThickLine (350, 2, 400, 2, 5, black)           % base of pole
                Draw.ThickLine (375, 300, 375, 0, 5, black)         % long vertical pole
                Draw.ThickLine (250, 300, 375, 300, 5, black)       % horizontal piece
                Draw.ThickLine (250, 300, 250, 265, 5, black)       % noose (attached to head)
                Draw.FillOval (250, 230, 35, 35, black)             % head of stickman
                Draw.FillOval (235, 243, 6, 6, white)               % left eye
                Draw.FillOval (265, 243, 6, 6, white)               % right eye
                Draw.FillOval (250, 215, 20, 15, white)             % mouth
                Draw.ThickLine (250, 100, 250, 195, 5, black)       % body of stickman
            label 30 :
                Draw.ThickLine (350, 2, 400, 2, 5, black)           % base of pole
                Draw.ThickLine (375, 300, 375, 0, 5, black)         % long vertical pole
                Draw.ThickLine (250, 300, 375, 300, 5, black)       % horizontal piece
                Draw.ThickLine (250, 300, 250, 265, 5, black)       % noose (attached to head)
                Draw.FillOval (250, 230, 35, 35, black)             % head of stickman
                Draw.FillOval (235, 243, 6, 6, white)               % left eye
                Draw.FillOval (265, 243, 6, 6, white)               % right eye
                Draw.FillOval (250, 215, 20, 15, white)             % mouth
                Draw.ThickLine (250, 100, 250, 195, 5, black)       % body of stickman
                Draw.ThickLine (200, 150, 250, 150, 5, black)       % right arm of stickman
            label 20 :
                Draw.ThickLine (350, 2, 400, 2, 5, black)           % base of pole
                Draw.ThickLine (375, 300, 375, 0, 5, black)         % long vertical pole
                Draw.ThickLine (250, 300, 375, 300, 5, black)       % horizontal piece
                Draw.ThickLine (250, 300, 250, 265, 5, black)       % noose (attached to head)
                Draw.FillOval (250, 230, 35, 35, black)             % head of stickman
                Draw.FillOval (235, 243, 6, 6, white)               % left eye
                Draw.FillOval (265, 243, 6, 6, white)               % right eye
                Draw.FillOval (250, 215, 20, 15, white)             % mouth
                Draw.ThickLine (250, 100, 250, 195, 5, black)       % body of stickman
                Draw.ThickLine (200, 150, 250, 150, 5, black)       % right arm of stickman
                Draw.ThickLine (250, 150, 300, 150, 5, black)       % left arm of stickman
            label :
                Draw.ThickLine (350, 2, 400, 2, 5, black)           % base of pole
                Draw.ThickLine (375, 300, 375, 0, 5, black)         % long vertical pole
                Draw.ThickLine (250, 300, 375, 300, 5, black)       % horizontal piece
                Draw.ThickLine (250, 300, 250, 265, 5, black)       % noose (attached to head)
                Draw.FillOval (250, 230, 35, 35, black)             % head of stickman
                Draw.FillOval (235, 243, 6, 6, white)               % left eye
                Draw.FillOval (265, 243, 6, 6, white)               % right eye
                Draw.FillOval (250, 215, 20, 15, white)             % mouth
                Draw.ThickLine (250, 100, 250, 195, 5, black)       % body of stickman
                Draw.ThickLine (200, 150, 250, 150, 5, black)       % right arm of stickman
                Draw.ThickLine (250, 150, 300, 150, 5, black)       % left arm of stickman
                Draw.ThickLine (300, 40, 250, 100, 5, black)        % left leg of stickman
        end case
    end loop
    
    % Prompts the user to guess the secret word. This gets executed only if the user has no more
    % points, or if they entered "!".
    if (score <= 0 or letterGuess = GUESS_WORD_NOW) and lettersGuessed not= secretWord then
        cls
     
        % If the last character entered was the "?" signal, the hint is printed.
        if letterGuess = GET_HINT then
            put "HINT: ", getWordHint
        end if
        put "Letters guessed so far: ", lettersGuessed
        put ""
        
        % Reminds the user why they are being prompted to guess the entire secret word.
        if score <= 0 then
            put "Sorry, you have no more points. You must now guess the secret word."
        else
            put "You entered the \"!\" signal!"
        end if
        put "What is the secret word? " ..
        get wordGuess
        
        % Converts all the letters of the word guess to uppercase characters so that it could be compared with
        % the secret word. If the entered word is the same as the secret word, the user gets 10 extra points.
        % If not, the user loses all their points.
        for letter : 1 .. length (wordGuess)
            if wordGuess (letter) >= "a" and wordGuess (letter) <= "z" then
                wordGuess := wordGuess (1 .. letter - 1) + chr (ord (wordGuess (letter)) - 32) + wordGuess (letter + 1 .. *)
            end if
        end for
        cls
        if wordGuess = secretWord then
            put "Your guess is correct!"
            score := score + 10
        else
            put "Incorrect! The secret word was ", secretWord, "."
            score := 0
        end if
    end if
    
    % Outputs the player's final score.
    put "You ended the game with ", score, " points.\n"
    
    % Asks the user if they would like to play the game again.
    put "Do you want to play again?"
    put "Enter \"end\" to end the game, or anything else to restart with a new secret word."
    get endGame
    
    % Converts the user's response to uppercase letters so that it could be compared with
    % END_GAME_NOW.
    for letter : 1..length(endGame)
        if endGame(letter) >= "A" and endGame(letter) <= "Z" then
            endGame := endGame (1..letter-1) + chr (ord (endGame(letter)) + 32) + endGame (letter+1..*)
        end if
    end for
    
    % If the user does not want to play again, the program exits the loop.
    exit when endGame = END_GAME_NOW
    lettersGuessed := ""
    score := 100
end loop

% Thanks the user for playing the game. The program ends.
cls
Font.Draw (" Thanks for playing!", 75, 350, endScreenFont, black)
Draw.ThickLine (350, 2, 400, 2, 5, black)               % base of pole
Draw.ThickLine (375, 300, 375, 0, 5, black)             % long vertical pole
Draw.ThickLine (250, 300, 375, 300, 5, black)           % horizontal piece
Draw.ThickLine (250, 300, 250, 265, 5, black)           % noose (attached to head)
Draw.FillOval (250, 230, 35, 35, black)                 % head of stickman
Draw.FillOval (235, 243, 6, 6, white)                   % left eye
Draw.FillOval (265, 243, 6, 6, white)                   % right eye
Draw.FillOval (250, 215, 20, 15, white)                 % mouth
Draw.ThickLine (250, 100, 250, 195, 5, black)           % body of stickman
Draw.ThickLine (200, 150, 250, 150, 5, black)           % right arm of stickman
Draw.ThickLine (250, 150, 300, 150, 5, black)           % left arm of stickman
Draw.ThickLine (300, 40, 250, 100, 5, black)            % left leg of stickman
Draw.ThickLine (200, 40, 250, 100, 5, black)            % right leg of stickman
